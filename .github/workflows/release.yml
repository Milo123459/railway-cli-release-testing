name: Rust CI

on:
  push:
    tags:
      - 'v*.*.*'
  workflow_dispatch:

jobs:
  build:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        target: [x86_64-unknown-linux-musl, aarch64-unknown-linux-gnu, x86_64-apple-darwin, aarch64-apple-darwin, x86_64-pc-windows-msvc, aarch64-pc-windows-msvc, i686-pc-windows-msvc]

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Set up Rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          override: true

      - name: Cache cargo
        uses: Swatinem/rust-cache@v2

      - name: Extract version
        id: version
        run: echo "::set-output name=VERSION::$(cargo metadata --no-deps --format-version=1 | jq -r '.packages[0].version')"

      - name: Install dependencies (Linux)
        if: matrix.os == 'ubuntu-latest'
        run: sudo apt-get install musl-tools -y

      - name: Install cargo-deb (Linux)
        if: matrix.os == 'ubuntu-latest'
        run: cargo install cargo-deb

      - name: Build release binaries (Linux and macOS)
        if: matrix.os != 'windows-latest'
        run: |
          if [ "${{ matrix.os }}" == "ubuntu-latest" ]; then
            sudo apt-get install musl-tools -y
          fi
          cross build --release --locked --target ${{ matrix.target }}

      - name: Build release binaries (Windows)
        if: matrix.os == 'windows-latest'
        run: cargo build --release --locked --target ${{ matrix.target }}

      - name: Prepare artifacts (Linux and macOS)
        if: matrix.os != 'windows-latest'
        run: |
          cd target/${{ matrix.target }}/release
          tar czvf ../../../railway-${{ steps.version.outputs.VERSION }}-${{ matrix.target }}.tar.gz railway
          cd -

      - name: Prepare artifacts (Windows)
        if: matrix.os == 'windows-latest'
        run: |
          cd target/${{ matrix.target }}/release
          7z a ../../../railway-${{ steps.version.outputs.VERSION }}-${{ matrix.target }}.zip railway.exe
          cd -

      - name: Build Debian package
        if: matrix.os == 'ubuntu-latest'
        run: cargo deb --no-build --target ${{ matrix.target }}

      - name: Upload release artifacts
        uses: actions/upload-artifact@v3
        with:
          name: railway-${{ matrix.target }}-${{ steps.version.outputs.VERSION }}
          path: |
            target/${{ matrix.target }}/release/railway-${{ steps.version.outputs.VERSION }}-${{ matrix.target }}.*

  release:
    needs: build
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Extract version
        id: version
        run: echo "::set-output name=VERSION::$(cargo metadata --no-deps --format-version=1 | jq -r '.packages[0].version')"

      - name: Download release artifacts
        uses: actions/download-artifact@v3
        with:
          name: railway-${{ matrix.target }}-${{ steps.version.outputs.VERSION }}
          path: ./artifacts

      - name: Create release
        id: create-release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref_name }}
          release_name: ${{ github.ref_name }}
          draft: false
          prerelease: false

      - name: Upload release assets
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create-release.outputs.upload_url }}
          asset_path: ./artifacts/*
          asset_name: railway-${{ steps.version.outputs.VERSION }}-${{ matrix.target }}.${{ matrix.os == 'windows-latest' && 'zip' || 'tar.gz' }}
          asset_content_type: application/octet-stream

    #   - name: Publish to crates.io
    #     uses: crate-ci/publish-me@v1.0.5
    #     with:
    #       token: ${{ secrets.CARGO_REGISTRY_TOKEN }}

    #   - name: Update Homebrew formula
    #     run: |
    #       brew install minio/stable/mc
    #       cd homebrew-tap
    #       ./update-formula.sh ${{ needs.build.outputs.VERSION }}
    #     env:
    #       HOMEBREW_GITHUB_API_TOKEN: ${{ secrets.HOMEBREW_GITHUB_API_TOKEN }}
